#!groovyâ€‹

brand = ["Admin:$_1_Admin,Database:$_2_Database,Nordics_Database:$_3_Nordics_Database,First_Choice:$First_Choice,Cruise_Deals:$Cruise_Deals,HHM:$Holiday_Hyper_Market,Falcon:$Falcon,Retail_TUI:$Retail_TUI,Retail_Falcon:$Retail_Falcon,TUI:$TUI,SE:$SE,DK:$DK,FI:$FI,NR:$NR,RTSE:$RTSE,RTNR:$RTNR,NRDADMIN:$NRDAdmin"]

def audit() {
def file = load "${workspace}/Auditlog.groovy"
file.config("terraform-apache-hybris","Webstack-Devops","$BUILD_USER","${params.Environment}","$BUILD_ID","false","linux-01","$JOB_URL","$brand","${params.Action}")

}

// Terraform apply or plan via the Makefile
def TerraApply(String LayerToDeploy, String Environment, String TerraAction) {
    // force all non apply requests to plan
    // if (TerraAction != 'apply') {
    //     TerraAction = 'plan'
    // }
    sh """
        set +x
        echo "=== Terraform ${TerraAction} for ${LayerToDeploy} in ${Environment} ==="
        LAYER=${LayerToDeploy} WORKSPACE=${Environment} make first-run
        LAYER=${LayerToDeploy} WORKSPACE=${Environment} make init
        LAYER=${LayerToDeploy} WORKSPACE=${Environment} make ${TerraAction}
        """
}
pipeline {
    agent { label 'linux-01' }
    environment {
          AWS_CREDENTIALS = credentials('uki_iam_user_jenkins')
          AWS_ACCESS_KEY_ID = "${env.AWS_CREDENTIALS_USR}"
          AWS_SECRET_ACCESS_KEY = "${env.AWS_CREDENTIALS_PSW}"
          NR_CREDENTIALS = credentials('Northern_Region_API_credentials')
          NR_PASSWORD = "${env.NR_Credentials_PSW}"
    }
    parameters {
        booleanParam(name: '_1_Admin', defaultValue: false, description: 'Hybris Admin')
        booleanParam(name: 'NRDAdmin', defaultValue: false, description: 'Nordics Hybris Admin')
        booleanParam(name: '_2_Database', defaultValue: false, description: 'Hybris Database')
		booleanParam(name: '_3_Nordics_Database', defaultValue: false, description: 'Nordics Hybris Database')
        booleanParam(name: 'AuroraDatabase', defaultValue: false, description: 'Hybris Aurora Database')
        booleanParam(name: 'NordicsAuroraDatabase', defaultValue: false, description: 'NRD Hybris Aurora Database')
        booleanParam(name: 'First_Choice', defaultValue: false, description: 'First Choice')
        booleanParam(name: 'Cruise_Deals', defaultValue: false, description: 'Cruise Deals')
        booleanParam(name: 'Holiday_Hyper_Market', defaultValue: false, description: 'Holiday Hyper Market')
        booleanParam(name: 'Falcon', defaultValue: false, description: 'Falcon Holidays')
        booleanParam(name: 'Retail_TUI', defaultValue: false, description: 'Retail TUI')
        booleanParam(name: 'Retail_Falcon', defaultValue: false, description: 'Retail Falcon Holidays')
        booleanParam(name: 'TUI', defaultValue: false, description: 'TUI')
        booleanParam(name: 'SE', defaultValue: false, description: 'TUI Sweden')
        booleanParam(name: 'DK', defaultValue: false, description: 'TUI Denmark')
        booleanParam(name: 'FI', defaultValue: false, description: 'TUI Finland')
        booleanParam(name: 'NR', defaultValue: false, description: 'TUI Norway')
        booleanParam(name: 'RTSE', defaultValue: false, description: 'Retail Sweden')
        booleanParam(name: 'RTNR', defaultValue: false, description: 'Retail Norway')
        booleanParam(name: 'FC_ElasticCache', defaultValue: false, description: 'Elastic Cache Cluster for FC Domain')
        booleanParam(name: 'TUI_ElasticCache', defaultValue: false, description: 'Elastic Cache Cluster for TUI Domain')
        booleanParam(name: 'NRD_ElasticCache', defaultValue: false, description: 'Elastic Cache Cluster for NRD Domain')
        booleanParam(name: 'UKIRetail_ElasticCache', defaultValue: false, description: 'Elastic Cache Cluster for UKIRetail Domain')
        choice(name: 'Environment', choices: 'ST7', description: 'Select Environment')
        choice(name: 'Action', choices: 'plan\napply\nplan-destroy\ndestroy', description: 'Select Action')
    }
    stages {

        stage('Download Repositories') {
            steps {
                dir ('modules') {
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-aurora-database']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-aurora-database.git',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])

                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-lb']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-lb.git',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-lb-listener']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-lb-listener.git',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-lb-tg']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-lb-tg.git',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-lb-listener-rules']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-lb-listener-rules.git',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-autoscaling']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-autoscaling.git',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-database']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-database.git',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-launchTemplate-autoscaling']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-launchTemplate-autoscaling.git',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])
					          checkout([
                        $class: 'GitSCM', branches: [[name: '*/develop']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'uki-webstack-terraform-module-elasticache']],
                        userRemoteConfigs: [[url: 'git@bitbucket.org:tui-uk-dev/uki-webstack-terraform-module-elasticache',
                        credentialsId:'1a092ee8-5261-4480-aea4-501f960e87a8']]
                    ])
                }
                }
            }

		stage('Run parallel DB exexution') {
            parallel {
				stage('Database') {
					//when { expression { ((params._1_Admin == true || params.First_Choice == true || params.Falcon == true || params.Retail_TUI == true || params.Retail_Falcon == true || params.TUI == true || params.Cruise_Deals == true || params.Holiday_Hyper_Market == true) && (params.Action == "plan" || params.Action == "apply")) || ((params.Action == "plan-destroy" || params.Action == "destroy") && (params.destroy_db == true)) } }
					when { expression { params._2_Database == true } }
					steps {
						script {
							TerraApply("Database", params.Environment, params.Action)
						}
					}
				}
				stage('NordicsDatabase') {
					//when { expression { ((params._1_Admin == true || params.First_Choice == true || params.Falcon == true || params.Retail_TUI == true || params.Retail_Falcon == true || params.TUI == true || params.Cruise_Deals == true || params.Holiday_Hyper_Market == true) && (params.Action == "plan" || params.Action == "apply")) || ((params.Action == "plan-destroy" || params.Action == "destroy") && (params.destroy_db == true)) } }
					when { expression { params._3_Nordics_Database == true } }
					steps {
						script {
							TerraApply("NordicsDatabase", params.Environment, params.Action)
						}
					}
				}
				stage('AuroraDataBase') {
					when { expression { params.AuroraDatabase == true } }
					steps {
						script {
							TerraApply("AuroraDatabase", params.Environment, params.Action)
						}
					}
				}
				stage('NordicsAuroraDataBase') {
					when { expression { params.NordicsAuroraDatabase == true } }
					steps {
						script {
							TerraApply("NordicsAuroraDatabase", params.Environment, params.Action)
						}
					}
				}
			}
		}
		stage('Run parallel Admin exexution') {
            parallel {
				stage('Nordics Admin') {
					when { expression { params.NRDAdmin == true } }
					steps {
						script {
							TerraApply("NordicsAdmin", params.Environment, params.Action)
						}
					}
				}
				stage('Admin') {
					//when { expression { ((params.First_Choice == true || params.Falcon == true || params.Retail_TUI == true || params.Retail_Falcon == true || params.TUI == true || params.Cruise_Deals == true || params.Holiday_Hyper_Market == true) && (params.Action == "plan" || params.Action == "apply")) || ((params.Action == "plan-destroy" || params.Action == "destroy") && (params.destroy_admin == true)) } }
					when { expression { params._1_Admin == true } }
					steps {
						script {
							TerraApply("Admin", params.Environment, params.Action)
						}
					}
				}
			}
		}
		stage('Run parallel First set exexution') {
            parallel {

				stage('First Choice') {
					when { expression { params.First_Choice == true } }
					steps {
						script {
							TerraApply("FC", params.Environment, params.Action)
						}
					}
				}
				stage('Falcon Holidays') {
					when { expression { params.Falcon == true } }
					steps {
						script {
							TerraApply("FH", params.Environment, params.Action)
						}
					}
				}
				stage('TUI Sweden') {
					when { expression { params.SE == true } }
					steps {
						script {
							TerraApply("SE", params.Environment, params.Action)
						}
					}
				}
				stage('TUI Denmark') {
					when { expression { params.DK == true } }
					steps {
						script {
							TerraApply("DK", params.Environment, params.Action)
						}
					}
				}
			}
		}
		stage('Run parallel Second set exexution') {
            parallel {
				stage('TUI') {
					when { expression { params.TUI == true } }
					steps {
						script {
							TerraApply("TUI", params.Environment, params.Action)
						}
					}
				}
				stage('TUI Finland') {
					when { expression { params.FI == true } }
					steps {
						script {
							TerraApply("FI", params.Environment, params.Action)
						}
					}
				}
				stage('Retail Falcon Holidays') {
					when { expression { params.Retail_Falcon == true } }
					steps {
						script {
							TerraApply("RFH", params.Environment, params.Action)
						}
					}
				}
				stage('TUI Norway') {
					when { expression { params.NR == true } }
					steps {
						script {
							TerraApply("NR", params.Environment, params.Action)
						}
					}
				}
			}
		}
		stage('Run parallel Third set exexution') {
            parallel {
				stage('Retail TUI') {
					when { expression { params.Retail_TUI == true } }
					steps {
						script {
							TerraApply("RTH", params.Environment, params.Action)
						}
					}
				}
				stage('Retail Sweden') {
					when { expression { params.RTSE == true } }
					steps {
						script {
							TerraApply("RTSE", params.Environment, params.Action)
						}
					}
				}
				stage('Retail Norway') {
					when { expression { params.RTNR == true } }
					steps {
						script {
							TerraApply("RTNR", params.Environment, params.Action)
						}
					}
				}
				stage('Cruise Deals') {
					when { expression { params.Cruise_Deals == true } }
					steps {
						script {
							TerraApply("CD", params.Environment, params.Action)
						}
					}
				}
				stage('Holiday Hyper Market') {
					when { expression { params.Holiday_Hyper_Market == true } }
					steps {
						script {
							TerraApply("HHM", params.Environment, params.Action)
						}
					}
				}
			}
		}
    stage('Run parallel Fourth set execution') {
            parallel {
        stage('FC_ElasticCache') {
          when { expression { params.FC_ElasticCache == true } }
          steps {
            script {
              TerraApply("FC_ElasticCache", params.Environment, params.Action)
            }
          }
        }
        stage('TUI_ElasticCache') {
          when { expression { params.TUI_ElasticCache == true } }
          steps {
            script {
              TerraApply("TUI_ElasticCache", params.Environment, params.Action)
            }
          }
        }
        stage('NRD_ElasticCache') {
          when { expression { params.NRD_ElasticCache == true } }
          steps {
            script {
              TerraApply("NRD_ElasticCache", params.Environment, params.Action)
            }
          }
        }
        stage('UKIRetail_ElasticCache') {
          when { expression { params.UKIRetail_ElasticCache == true } }
          steps {
            script {
              TerraApply("UKIRetail_ElasticCache", params.Environment, params.Action)
            }
          }
        }
      }
    }

    stage('Audit') {
         steps {
         wrap([$class: 'BuildUser']){
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
          dir("${workspace}") {
            checkout([
                    $class           : 'GitSCM', branches: [[name: "*/master"]],
                    userRemoteConfigs: [[url          : 'git@bitbucket.org:tui-uk-dev/uki-webstack-auditlogs.git',
                                         credentialsId: '1a092ee8-5261-4480-aea4-501f960e87a8']]
            ])

            script {
                audit()
              }
            }
          }
        }
     }
    }
    }//stages
}//pipeline
