#!groovy

// Terraform apply or plan via the Makefile
// Terraform apply or plan via the Makefile
def TerraApply(String LayerToDeploy, String Environment, String TerraAction) {
    // force all non apply requests to plan
    // if (TerraAction != 'apply') {
    //     TerraAction = 'plan'
    // }
    sh """
        set +x
        echo "=== Terraform ${TerraAction} for ${LayerToDeploy} in ${Environment} ==="
        LAYER=${LayerToDeploy} WORKSPACE=${Environment} make first-run
        LAYER=${LayerToDeploy} WORKSPACE=${Environment} make init
        LAYER=${LayerToDeploy} WORKSPACE=${Environment} make ${TerraAction}
        """
}
pipeline {	
	agent any 
    parameters {
        booleanParam(name: 'PACKER_AMI_BUILD', defaultValue: false, description: 'Packer AMI Build')
		booleanParam(name: '_1_MEDIAWIKI_INFRA', defaultValue: false, description: 'Infrastructure creation')
        choice(name: 'Environment', choices: 'DEV', description: 'Select Environment')
        choice(name: 'Action', choices: 'plan\napply\nplan-destroy\ndestroy', description: 'Select Action')
    }
    stages {
        stage('Download Repositories') {
            steps {
                dir ('modules') {
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/master']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'naveen_aws_core_module']],
                        userRemoteConfigs: [[url: 'https://github.com/naveencloud/naveen_aws_core_module.git']]
                    ])
                }
            }
        }
        stage('MediaWiki_InfraCreration') {
			when { expression { params._1_MEDIAWIKI_INFRA == true } }
			steps {
				script {
					TerraApply("DEV", params.Environment, params.Action)
				}
			}
		}/*
        stage('Ansible_INSTALL_MEDIAWIKI') {
            steps {
                withCredentials([
                        sshUserPrivateKey(credentialsId: 'Gitlab-shhkey', keyFileVariable: 'GIT_SSH_KEY')
                ]) {
                    dir('ansible-mediawiki') {
                        script {
                                sh 'ansible-playbook -i env/aws/ec2.py plays/installmediawiki.yml -e \'host=tag_Environment_dev\' -e ansible_ssh_user=ec2-user  -e ansible_ssh_private_key_file=${workspace}/webstack.pem'
                        }
                    }
                }
            }
        } */
        stage('MediaWiki_AMI_Build') {
            when { expression { params.PACKER_AMI_BUILD == true } }
            steps {
                sh '''
			export packer_env=$Environment
            echo -e "\nCreating MediaWiki Image with Packer...\n"
            TMPDIR=`pwd` PACKER_LOG=1 PACKER_LOG_PATH="packerlog.txt" packer build packer/mediawikiamibuild.json
          '''
            }
        }
    }//stages
}//pipeline